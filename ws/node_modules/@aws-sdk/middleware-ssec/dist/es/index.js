import { __assign, __awaiter, __generator, __values } from "tslib";
export function ssecMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return __awaiter(_this, void 0, void 0, function () {
        var input, properties, properties_1, properties_1_1, prop, value, valueView, encoded, hash, _a, _b, _c, _d, e_1_1;
        var e_1, _e, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    input = __assign({}, args.input);
                    properties = [
                        {
                            target: "SSECustomerKey",
                            hash: "SSECustomerKeyMD5",
                        },
                        {
                            target: "CopySourceSSECustomerKey",
                            hash: "CopySourceSSECustomerKeyMD5",
                        },
                    ];
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 6, 7, 8]);
                    properties_1 = __values(properties), properties_1_1 = properties_1.next();
                    _g.label = 2;
                case 2:
                    if (!!properties_1_1.done) return [3 /*break*/, 5];
                    prop = properties_1_1.value;
                    value = input[prop.target];
                    if (!value) return [3 /*break*/, 4];
                    valueView = ArrayBuffer.isView(value)
                        ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)
                        : typeof value === "string"
                            ? options.utf8Decoder(value)
                            : new Uint8Array(value);
                    encoded = options.base64Encoder(valueView);
                    hash = new options.md5();
                    hash.update(valueView);
                    _a = [__assign({}, input)];
                    _f = {}, _f[prop.target] = encoded;
                    _b = prop.hash;
                    _d = (_c = options).base64Encoder;
                    return [4 /*yield*/, hash.digest()];
                case 3:
                    input = __assign.apply(void 0, _a.concat([(_f[_b] = _d.apply(_c, [_g.sent()]), _f)]));
                    _g.label = 4;
                case 4:
                    properties_1_1 = properties_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (properties_1_1 && !properties_1_1.done && (_e = properties_1.return)) _e.call(properties_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/, next(__assign(__assign({}, args), { input: input }))];
            }
        });
    }); }; };
}
export var ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: ["SSE"],
    override: true,
};
export var getSsecPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQW1CQSxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQTJCO0lBQTFELGlCQTBDQztJQXpDQyxPQUFPLFVBQ0wsSUFBb0MsSUFDRCxPQUFBLFVBQ25DLElBQXFDOzs7Ozs7b0JBRWpDLEtBQUssZ0JBQVEsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDO29CQUN4QixVQUFVLEdBQUc7d0JBQ2pCOzRCQUNFLE1BQU0sRUFBRSxnQkFBZ0I7NEJBQ3hCLElBQUksRUFBRSxtQkFBbUI7eUJBQzFCO3dCQUNEOzRCQUNFLE1BQU0sRUFBRSwwQkFBMEI7NEJBQ2xDLElBQUksRUFBRSw2QkFBNkI7eUJBQ3BDO3FCQUNGLENBQUM7Ozs7b0JBRWlCLGVBQUEsU0FBQSxVQUFVLENBQUE7Ozs7b0JBQWxCLElBQUk7b0JBQ1AsS0FBSyxHQUE0QixLQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3lCQUM5RCxLQUFLLEVBQUwsd0JBQUs7b0JBQ0QsU0FBUyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO3dCQUN6QyxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUM7d0JBQ2xFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFROzRCQUMzQixDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7NEJBQzVCLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQzNDLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQzt1Q0FFakIsS0FBYTtnQ0FDaEIsSUFBSSxDQUFDLE1BQU0sSUFBRyxPQUFPO29CQUNyQixLQUFBLElBQUksQ0FBQyxJQUFJLENBQUE7b0JBQUcsS0FBQSxDQUFBLEtBQUEsT0FBTyxDQUFBLENBQUMsYUFBYSxDQUFBO29CQUFDLHFCQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQTs7b0JBSHhELEtBQUssK0NBR1UsY0FBc0IsU0FBbUIsRUFBQyxRQUN4RCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUlOLHNCQUFPLElBQUksdUJBQ04sSUFBSSxLQUNQLEtBQUssT0FBQSxJQUNMLEVBQUM7OztTQUNKLEVBdENvQyxDQXNDcEMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBNkI7SUFDN0QsSUFBSSxFQUFFLGdCQUFnQjtJQUN0QixJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDYixRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsVUFBQyxNQUEwQixJQUEwQixPQUFBLENBQUM7SUFDakYsWUFBWSxFQUFFLFVBQUMsV0FBVztRQUN4QixXQUFXLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDRixDQUFDLEVBSmdGLENBSWhGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEZWNvZGVyLFxuICBFbmNvZGVyLFxuICBIYXNoLFxuICBJbml0aWFsaXplSGFuZGxlcixcbiAgSW5pdGlhbGl6ZUhhbmRsZXJBcmd1bWVudHMsXG4gIEluaXRpYWxpemVIYW5kbGVyT3B0aW9ucyxcbiAgSW5pdGlhbGl6ZUhhbmRsZXJPdXRwdXQsXG4gIEluaXRpYWxpemVNaWRkbGV3YXJlLFxuICBNZXRhZGF0YUJlYXJlcixcbiAgUGx1Z2dhYmxlLFxuICBTb3VyY2VEYXRhLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmludGVyZmFjZSBQcmV2aW91c2x5UmVzb2x2ZWQge1xuICBiYXNlNjRFbmNvZGVyOiBFbmNvZGVyO1xuICBtZDU6IHsgbmV3ICgpOiBIYXNoIH07XG4gIHV0ZjhEZWNvZGVyOiBEZWNvZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3NlY01pZGRsZXdhcmUob3B0aW9uczogUHJldmlvdXNseVJlc29sdmVkKTogSW5pdGlhbGl6ZU1pZGRsZXdhcmU8YW55LCBhbnk+IHtcbiAgcmV0dXJuIDxPdXRwdXQgZXh0ZW5kcyBNZXRhZGF0YUJlYXJlcj4oXG4gICAgbmV4dDogSW5pdGlhbGl6ZUhhbmRsZXI8YW55LCBPdXRwdXQ+XG4gICk6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0PiA9PiBhc3luYyAoXG4gICAgYXJnczogSW5pdGlhbGl6ZUhhbmRsZXJBcmd1bWVudHM8YW55PlxuICApOiBQcm9taXNlPEluaXRpYWxpemVIYW5kbGVyT3V0cHV0PE91dHB1dD4+ID0+IHtcbiAgICBsZXQgaW5wdXQgPSB7IC4uLmFyZ3MuaW5wdXQgfTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gW1xuICAgICAge1xuICAgICAgICB0YXJnZXQ6IFwiU1NFQ3VzdG9tZXJLZXlcIixcbiAgICAgICAgaGFzaDogXCJTU0VDdXN0b21lcktleU1ENVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGFyZ2V0OiBcIkNvcHlTb3VyY2VTU0VDdXN0b21lcktleVwiLFxuICAgICAgICBoYXNoOiBcIkNvcHlTb3VyY2VTU0VDdXN0b21lcktleU1ENVwiLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCBwcm9wIG9mIHByb3BlcnRpZXMpIHtcbiAgICAgIGNvbnN0IHZhbHVlOiBTb3VyY2VEYXRhIHwgdW5kZWZpbmVkID0gKGlucHV0IGFzIGFueSlbcHJvcC50YXJnZXRdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlVmlldyA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSlcbiAgICAgICAgICA/IG5ldyBVaW50OEFycmF5KHZhbHVlLmJ1ZmZlciwgdmFsdWUuYnl0ZU9mZnNldCwgdmFsdWUuYnl0ZUxlbmd0aClcbiAgICAgICAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgID8gb3B0aW9ucy51dGY4RGVjb2Rlcih2YWx1ZSlcbiAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KHZhbHVlKTtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IG9wdGlvbnMuYmFzZTY0RW5jb2Rlcih2YWx1ZVZpZXcpO1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IG9wdGlvbnMubWQ1KCk7XG4gICAgICAgIGhhc2gudXBkYXRlKHZhbHVlVmlldyk7XG4gICAgICAgIGlucHV0ID0ge1xuICAgICAgICAgIC4uLihpbnB1dCBhcyBhbnkpLFxuICAgICAgICAgIFtwcm9wLnRhcmdldF06IGVuY29kZWQsXG4gICAgICAgICAgW3Byb3AuaGFzaF06IG9wdGlvbnMuYmFzZTY0RW5jb2Rlcihhd2FpdCBoYXNoLmRpZ2VzdCgpKSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dCh7XG4gICAgICAuLi5hcmdzLFxuICAgICAgaW5wdXQsXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBzc2VjTWlkZGxld2FyZU9wdGlvbnM6IEluaXRpYWxpemVIYW5kbGVyT3B0aW9ucyA9IHtcbiAgbmFtZTogXCJzc2VjTWlkZGxld2FyZVwiLFxuICBzdGVwOiBcImluaXRpYWxpemVcIixcbiAgdGFnczogW1wiU1NFXCJdLFxuICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTc2VjUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChzc2VjTWlkZGxld2FyZShjb25maWcpLCBzc2VjTWlkZGxld2FyZU9wdGlvbnMpO1xuICB9LFxufSk7XG4iXX0=